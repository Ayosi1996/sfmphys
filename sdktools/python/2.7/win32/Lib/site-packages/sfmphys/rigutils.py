import vs
import sfm
import sys
import sfmUtils
from .dagutils import *

#configuration for animset attribute names

#rigidbody properties
name_targetname = "Target"
name_shape = "Shape"
name_boxsize = "BoxSize"
name_boxcenter = "BoxCenter"
name_margin = "Margin"
name_mass = "Mass"
name_bounce = "Bounce"
name_friction = "Friction"
name_kinematic = "Kinematic"
name_lindamp = "LinearDamping"
name_rotdamp = "RotationalDamping"
name_handle = "Handle"
name_force = "Force"

#constraint properties
name_typename = "Type"
name_bodya = "BodyA"
name_bodyb = "BodyB"
name_rotx = "MaxRotationX"
name_roty = "MaxRotationY"
name_twist = "MaxTwist"

#softbody properties
name_boneprefix = "BonePrefix"
name_nodelist = "NodeList"
name_linklist = "LinkList"
name_facelist = "FaceList"
name_stretch = "Stretch"
name_shear = "Shear"
name_bend = "Bend"
name_nodemass = "Mass"
name_nodename = "Name"

def groupAddStringAttribute(group, name, value):
	attribute = group.AddAttribute(name, vs.AT_STRING)
	attribute.SetValue(value)
#end

def groupCreateControlledValue(group, name, value, animset, shot):
	tempControl, tempValue = sfmUtils.CreateControlledValue(name, "value", vs.AT_FLOAT, value, animset, shot)
	group.AddControl(tempControl)
#end

def groupGetControlledValueAtTime(group, name, time):
	return GetValueAtTime(group.FindControlByName(name, False).channel, time)
#end

#################################################################################
##Rigidbody
#################################################################################
class RigidbodyRig:
	def __init__(self, data=None, group=None, time=None):
		self.setDefaults()

		if (data is not None):
			self.readFromData(data)
		elif (group is not None) and (time is not None):
			self.readFromGroup(group, time)
		#end
	#end

	def setDefaults(self):
		self.target = "ERROR"
		self.shape = "box"
		self.boxsize = vs.Vector(0,0,0)
		self.boxcenter = vs.Vector(0,0,0)
		self.margin = 0.04
		self.bounce = 0.25
		self.friction = 0.9
		self.mass = 1
		self.lindamp = 0.05
		self.rotdamp = 0.1
	#end

	def createSuffix(self, target):
		return " ("+target+")"
	#end

	def readFromData(self, data):
		for key in data:
			setattr(self, key, data[key])
	#end

	def writeToGroup(self, group):
		animset = sfm.GetCurrentAnimationSet()
		shot = sfm.GetCurrentShot()
		rootDag = sfmUtils.FindFirstDag(["RootTransform", "rootTransform", "roottransform", "Roottransform"])
		suffix = self.createSuffix(self.target)

		groupAddStringAttribute(group, name_targetname, self.target)

		group.SetValue(name_boxsize, self.boxsize)
		group.SetValue(name_boxcenter, self.boxcenter)
		group.SetValue(name_margin, float(self.margin))
		group.SetValue(name_mass, float(self.mass))

		self.handle = sfm.CreateRigHandle(name_handle+suffix, group=group.GetName())

		#position the handle at the box center
		bonedag = sfm.FindDag(self.target)
		CenterTransform = PosQuatToTransform(self.boxcenter, vs.Quaternion(0,0,0,1))
		ResultTransform = vs.matrix3x4_t()
		vs.ConcatTransforms(bonedag.GetAbsTransform(), CenterTransform, ResultTransform)
		self.handle.SetAbsTransform(ResultTransform)
		sfmUtils.Parent(self.handle, rootDag)
		sfm.ParentConstraint(name_handle+suffix, self.target, mo=True)

		self.force = sfm.CreateRigHandle(name_force+suffix, group=group.GetName())
		self.force.SetAbsTransform(self.handle.GetAbsTransform())
		sfmUtils.Parent(self.force, self.handle)

		shapeval = 0
		if self.shape == "sphere":
			shapeval = 1
		groupCreateControlledValue(group, name_shape+suffix, shapeval, animset, shot)

		kineval = 0
		if self.mass == 0:
			kineval = 1
		groupCreateControlledValue(group, name_kinematic+suffix, kineval, animset, shot)

		groupCreateControlledValue(group, name_bounce+suffix, self.bounce, animset, shot)
		groupCreateControlledValue(group, name_friction+suffix, self.friction, animset, shot)
		groupCreateControlledValue(group, name_lindamp+suffix, self.lindamp, animset, shot)
		groupCreateControlledValue(group, name_rotdamp+suffix, self.rotdamp, animset, shot)
	#end

	def readFromGroup(self, group, time):
		self.target = group.GetValue(name_targetname)
		suffix = self.createSuffix(self.target)

		self.handle = group.FindControlByName(name_handle+suffix, False).GetDag()
		self.pos, self.quat = TransformToPosQuat(GetAbsTransformAtTime(self.handle, time))

		self.force = group.FindControlByName(name_force+suffix, False).GetDag()

		self.boxsize = group.GetValue(name_boxsize)
		self.boxcenter = group.GetValue(name_boxcenter)
		self.margin = group.GetValue(name_margin)

		shapeval = groupGetControlledValueAtTime(group, name_shape+suffix, time)
		self.shape = "box"
		if shapeval == 1:
			self.shape = "sphere"

		self.mass = group.GetValue(name_mass)
		kineval = groupGetControlledValueAtTime(group, name_kinematic+suffix, time)
		if kineval == 1:
			self.mass = 0

		self.bounce = groupGetControlledValueAtTime(group, name_bounce+suffix, time)
		self.friction = groupGetControlledValueAtTime(group, name_friction+suffix, time)
		self.lindamp = groupGetControlledValueAtTime(group, name_lindamp+suffix, time)
		self.rotdamp = groupGetControlledValueAtTime(group, name_rotdamp+suffix, time)
	#end
#end

#################################################################################
##Constraint
#################################################################################
class ConstraintRig:
	def __init__(self, data=None, group=None, time=None):
		self.setDefaults()

		if (data is not None):
			self.readFromData(data)
		elif (group is not None) and (time is not None):
			self.readFromGroup(group, time)
		#end
	#end

	def setDefaults(self):
		self.constype = "point"
		self.pos = None
		self.quat = vs.Quaternion(0,0,0,1)
		self.bodya = ""
		self.bodyb = ""
	#end

	def readFromData(self, data):
		for key in data:
			setattr(self, key, data[key])
	#end

	def createSuffix(self, constype, bodya, bodyb):
		return " (" + constype + "_constraint "+bodya+" -> "+bodyb+")"
	#end

	def writeToGroup(self, group):
		animset = sfm.GetCurrentAnimationSet()
		shot = sfm.GetCurrentShot()
		rootDag = sfmUtils.FindFirstDag(["RootTransform", "rootTransform", "roottransform", "Roottransform"])
		suffix = self.createSuffix(self.constype, self.bodya, self.bodyb)

		groupAddStringAttribute(group, name_typename, self.constype)
		groupAddStringAttribute(group, name_bodya, self.bodya)
		groupAddStringAttribute(group, name_bodyb, self.bodyb)

		self.handle = sfm.CreateRigHandle(name_handle+suffix, group=group.GetName())

		#position the handle at bodya plus some offset
		daga = sfm.FindDag(self.bodya)
		dagb = sfm.FindDag(self.bodyb)
		ResultTransform = vs.matrix3x4_t()
		if (self.pos is None):
			#placing pos at the same spot as bodyb is usually a good guess
			ResultTransform = PosQuatToTransform(dagb.GetAbsPosition(), daga.GetAbsOrientation())
		else:
			OffsetTransform = PosQuatToTransform(self.pos, vs.Quaternion(0,0,0,1))
			vs.ConcatTransforms(daga.GetAbsTransform(), OffsetTransform, ResultTransform)
		#end
		self.handle.SetAbsTransform(ResultTransform)
		sfmUtils.Parent(self.handle, daga)

		if (self.constype == "cone"):
			groupCreateControlledValue(group, name_rotx+suffix, self.rotx / 180.0, animset, shot)
			groupCreateControlledValue(group, name_roty+suffix, self.roty / 180.0, animset, shot)
			groupCreateControlledValue(group, name_twist+suffix, self.twist / 180.0, animset, shot)
		#end
	#end

	def readFromGroup(self, group, time):
		self.constype = group.GetValue(name_typename)
		self.bodya = group.GetValue(name_bodya)
		self.bodyb = group.GetValue(name_bodyb)
		suffix = self.createSuffix(self.constype, self.bodya, self.bodyb)

		self.handle = group.FindControlByName(name_handle+suffix, False).GetDag()
		self.pos, self.quat = TransformToPosQuat(GetAbsTransformAtTime(self.handle, time))

		if (self.constype == "cone"):
			self.rotx = groupGetControlledValueAtTime(group, name_rotx+suffix, time) * 180.0
			self.roty = groupGetControlledValueAtTime(group, name_roty+suffix, time) * 180.0
			self.twist = groupGetControlledValueAtTime(group, name_twist+suffix, time) * 180.0
		#end
	#end
#end

#################################################################################
##Softbody
#################################################################################
class SoftbodyRig:
	def __init__(self, data=None, group=None, time=None):
		self.setDefaults()

		if (data is not None):
			self.readFromData(data)
		elif (group is not None) and (time is not None):
			self.readFromGroup(group, time)
		#end
	#end

	def setDefaults(self):
		self.boneprefix = ""
		self.nodelist = list()
		self.linklist = list()
		self.facelist = list()
		self.margin = 0.04
		self.friction = 0.9
		self.damp = 0.05
		self.stretch = 0
		self.shear = 0.1
		self.bend = 0.9
		self.mass = 1.0
	#end

	def createSuffix(self, animset, boneprefix):
		return " ("+animset+"_"+boneprefix+")"
	#end

	def readFromData(self, data):
		for key in data:
			setattr(self, key, data[key])
	#end

	def writeToGroup(self, group):
		animset = sfm.GetCurrentAnimationSet()
		shot = sfm.GetCurrentShot()
		suffix = self.createSuffix(animset.GetName(), self.boneprefix)

		attrNodelist = group.AddAttribute(name_nodelist, vs.AT_ELEMENT_ARRAY)
		attrLinklist = group.AddAttribute(name_linklist, vs.AT_ELEMENT_ARRAY)
		attrFacelist = group.AddAttribute(name_facelist, vs.AT_ELEMENT_ARRAY)

		counter=0
		for bone in self.nodelist:
			temp = vs.CreateElement("Bone "+str(counter), group.GetFileId())
			temp.AddAttribute(name_nodename, vs.AT_STRING).SetValue(bone[0])
			temp.SetValue(name_nodemass, bone[1])
			attrNodelist.append(temp)
			counter+=1
		#end
		counter=0
		for link in self.linklist:
			temp = vs.CreateElement("Link "+str(counter), group.GetFileId())
			temp.SetValue("a", link[0])
			temp.SetValue("b", link[1])
			attrLinklist.append(temp)
			counter+=1
		#end
		counter=0
		for face in self.facelist:
			temp = vs.CreateElement("Link "+str(counter), group.GetFileId())
			temp.SetValue("a", face[0])
			temp.SetValue("b", face[1])
			temp.SetValue("c", face[2])
			temp.SetValue("d", face[3])
			attrFacelist.append(temp)
			counter+=1
		#end

		groupAddStringAttribute(group, name_boneprefix, self.boneprefix)
		group.SetValue(name_margin, float(self.margin))
		group.SetValue(name_mass, float(self.mass))
		groupCreateControlledValue(group, name_stretch+suffix, self.stretch, animset, shot)
		groupCreateControlledValue(group, name_shear+suffix, self.shear, animset, shot)
		groupCreateControlledValue(group, name_bend+suffix, self.bend, animset, shot)
		groupCreateControlledValue(group, name_lindamp+suffix, self.damp, animset, shot)
		groupCreateControlledValue(group, name_friction+suffix, self.friction, animset, shot)
	#end

	def readFromGroup(self, group, time):
		animset = group.FindAnimationSet(True)
		shot = sfm.GetCurrentShot()
		self.boneprefix = group.GetValue(name_boneprefix)
		suffix = self.createSuffix(animset.GetName(), self.boneprefix)

		self.daglist = list()

		for bone in group.GetValue(name_nodelist):
			dag = sfm.FindDag(animset.GetName()+":"+bone.GetValue(name_nodename))
			pos, quat = TransformToPosQuat(GetAbsTransformAtTime(dag, time))
			self.nodelist.append((bone.GetValue(name_nodename), bone.GetValue(name_nodemass), pos))
			self.daglist.append(dag)
		#end
		for link in group.GetValue(name_linklist):
			self.linklist.append((link.GetValue("a"), link.GetValue("b")))
		#end
		for face in group.GetValue(name_facelist):
			self.facelist.append((face.GetValue("a"), face.GetValue("b"), face.GetValue("c"), face.GetValue("d")))
		#end

		self.margin = group.GetValue(name_margin)
		self.mass = group.GetValue(name_mass)
		self.stretch = groupGetControlledValueAtTime(group, name_stretch+suffix, time)
		self.shear = groupGetControlledValueAtTime(group, name_shear+suffix, time)
		self.bend = groupGetControlledValueAtTime(group, name_bend+suffix, time)
		self.damp = groupGetControlledValueAtTime(group, name_lindamp+suffix, time)
		self.friction = groupGetControlledValueAtTime(group, name_friction+suffix, time)
	#end
#end