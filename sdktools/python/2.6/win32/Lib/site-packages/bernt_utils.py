import vs
import sfm
import sfmUtils
import inspect
from bernt_conversion import *

#######################################################
#   Functions for getting information about a session
#######################################################
def FindElementByName(name):
	max = vs.g_pDataModel.GetElementsAllocatedSoFar()
	elementHandle = vs.g_pDataModel.FirstAllocatedElement()
	
	for i in range(max):
		element = vs.g_pDataModel.GetElementName(elementHandle)
		if (element == None):
			continue
		
		if (element.GetName() == name):
			return vs.g_pDataModel.GetElement(elementHandle)
		#end if
		elementHandle = vs.g_pDataModel.NextAllocatedElement(elementHandle)
	#end for
	
	return None
#end

def FindElementsOfType(type):
	max = vs.g_pDataModel.GetElementsAllocatedSoFar()
	elementHandle = vs.g_pDataModel.FirstAllocatedElement()
	
	ret = []
	
	for i in range(max):
		element = vs.g_pDataModel.GetElement(elementHandle)
		if (element == None):
			continue
		
		if (element.GetTypeString() == type):
			ret.append(element)
		#end if
		elementHandle = vs.g_pDataModel.NextAllocatedElement(elementHandle)
	#end for
	
	return ret
#end

def FindElementByTypeAndName(type, name):
	max = vs.g_pDataModel.GetElementsAllocatedSoFar()
	elementHandle = vs.g_pDataModel.FirstAllocatedElement()
	
	for i in range(max):
		element = vs.g_pDataModel.GetElement(elementHandle)
		if (element == None):
			continue
			
		if (element.GetName() == name and element.GetTypeString() == type):
			return element
		#end if
		elementHandle = vs.g_pDataModel.NextAllocatedElement(elementHandle)
	#end for
	
	return None
#end

def GetAnimationSets():
	return sfm.GetCurrentShot().GetValue("animationSets")
#end

def GetCurrentTimeSelection():
	timeSelection = FindElementByTypeAndName("DmeTimeSelection", "timeSelection")
	
	times = [timeSelection.GetAttribute("falloff_left"),
		timeSelection.GetAttribute("hold_left"),
		timeSelection.GetAttribute("falloff_right"),
		timeSelection.GetAttribute("hold_right")]
	
	return {"falloff_left": times[0].GetValue().GetSeconds(),
			"hold_left": times[1].GetValue().GetSeconds(),
			"falloff_right": times[2].GetValue().GetSeconds(),
			"hold_right": times[3].GetValue().GetSeconds()}
#end

def GetFrameRate():
	renderSettings = FindElementByTypeAndName("DmElement", "renderSettings")
	return renderSettings.GetAttribute("frameRate").GetValue()
#end

###################################################
#   Functions for manipulating and animating dags
###################################################
class PhysProperties:
	def __init__(self, group, time):
		self.animset = group.FindAnimationSet(True).GetName()
		name = group.GetValue("BoneName")
		self.name = self.animset+":"+group.GetValue("BoneName")
		self.parentname = self.animset+":"+group.GetValue("ParentName")

		twist = group.GetValue("MaxTwist")
		self.twist = (twist * vs.M_PI) / 180.0 #convert degrees to radians

		self.dag = sfm.FindDag(self.name)
		self.parentdag = sfm.FindDag(self.parentname)

		self.boxsize = group.GetValue("BoxSize")
		self.boxcenter = group.GetValue("BoxCenter")

		self.handle = group.FindControlByName("Handle ("+name+")", False).GetDag()
		self.force = group.FindControlByName("Force ("+name+")", False).GetDag()
		self.centerofmass = vs.Vector(0,0,0)
		
		#shape properties
		shape = GetValueAtTime(group.FindControlByName("Shape ("+name+")", False).channel, time)
		if (shape > 0.5):
			self.shape = "sphere"
		else:
			self.shape = "box"
		
		#other phys properties
		kinematic = GetValueAtTime(group.FindControlByName("Kinematic ("+name+")", False).channel, time)
		if (kinematic > 0.5):
			self.kinematic = 1
		else:
			self.kinematic = 0
		
		self.friction = GetValueAtTime(group.FindControlByName("Friction ("+name+")", False).channel, time)
		self.bounce = GetValueAtTime(group.FindControlByName("Bounce ("+name+")", False).channel, time)
		self.density = GetValueAtTime(group.FindControlByName("Density ("+name+")", False).channel, time)
	#end
#end

def TransformToPosQuat(transform):
	pos = vs.Vector()
	quat = vs.Quaternion()
	vs.MatrixPosition(transform, pos)
	vs.MatrixQuaternion(transform, quat)

	return pos, quat
#end

def TransformToPosEuler(transform):
	pos = vs.Vector()
	quat = vs.Quaternion()
	vs.MatrixPosition(transform, pos)
	vs.MatrixQuaternion(transform, quat)

	euler = vs.RadianEuler()
	vs.QuaternionAngles(quat, euler)

	return pos, euler
#end

def PosQuatToTransform(pos, rot):
	result = vs.matrix3x4_t()
	vs.QuaternionMatrix(rot, pos, result)
	return result
#end

def GetAbsTransformAtTime(dag, time):
	trans = GetTransformAtTime(dag, time)

	if (dag.GetType() == vs.CDmeGameModel_GetStaticTypeSymbol()):
		return trans
	else:
		partrans = GetAbsTransformAtTime(dag.GetParent(), time)

		result = vs.matrix3x4_t()
		vs.ConcatTransforms(partrans, trans, result)
		return result
	#end
#end

def GetRelativeTransformAtTime(parent, child, time):
	partrans = GetAbsTransformAtTime(parent, time)
	childtrans = GetAbsTransformAtTime(child, time)

	inv_partrans = vs.matrix3x4_t()
	vs.MatrixInvert(partrans, inv_partrans)

	result = vs.matrix3x4_t()
	vs.ConcatTransforms(inv_partrans, childtrans, result)

	return result
#end

def GetTransformAtTime(dag, time):
	pos = GetValueAtTime(dag.FindTransformControl().GetPositionChannel(), time)
	quat = GetValueAtTime(dag.FindTransformControl().GetOrientationChannel(), time)

	#sys.stderr.write("GetTransform: "+dag.GetName()+" "+str(pos)+" "+str(quat)+"\n")

	return PosQuatToTransform(pos, quat)
#end

def GetValueAtTime(channel, time):
	clipstart = sfm.GetCurrentShot().GetStartTime()
	start = channel.FindOwnerClipForChannel(sfm.GetCurrentShot()).GetStartTime()
	return channel.GetLog().GetValue((time - clipstart) - start)
#end

def SetAbsTransformAtTime(dag, time, transform):
	if (dag.GetType() == vs.CDmeGameModel_GetStaticTypeSymbol()):
		SetTransformAtTime(dag, time, transform)
	else:
		partrans = GetAbsTransformAtTime(dag.GetParent(), time)

		inv_partrans = vs.matrix3x4_t()
		vs.MatrixInvert(partrans, inv_partrans)

		result = vs.matrix3x4_t()
		vs.ConcatTransforms(inv_partrans, transform, result)

		pos, quat = TransformToPosQuat(transform)
		parpos, parquat = TransformToPosQuat(partrans)
		respos, resquat = TransformToPosQuat(result)

		SetTransformAtTime(dag, time, result)
	#end
#end

def SetRelativeTransformAtTime(parent, child, time, transform):
	partrans = GetAbsTransformAtTime(parent, time)

	result = vs.matrix3x4_t()
	vs.ConcatTransforms(partrans, transform)

	SetAbsTransformAtTime(child, time, result)
#end

def SetTransformAtTime(dag, time, transform):
	pos = vs.Vector()
	quat = vs.Quaternion()
	vs.MatrixPosition(transform, pos)
	vs.MatrixQuaternion(transform, quat)
	SetValueAtTime(dag.FindTransformControl().GetPositionChannel(), time, pos)
	SetValueAtTime(dag.FindTransformControl().GetOrientationChannel(), time, quat)
#end

def SetValueAtTime(channel, time, value):
	clipstart = sfm.GetCurrentShot().GetStartTime()
	start = channel.FindOwnerClipForChannel(sfm.GetCurrentShot()).GetStartTime()
	channel.GetLog().SetKey((time - clipstart) - start, value);
#end