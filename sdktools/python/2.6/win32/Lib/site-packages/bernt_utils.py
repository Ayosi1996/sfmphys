import vs
import sfm
import sfmUtils
import inspect
from bernt_conversion import *

def FindElementByName(name):
	max = vs.g_pDataModel.GetElementsAllocatedSoFar()
	elementHandle = vs.g_pDataModel.FirstAllocatedElement()
	
	for i in range(max):
		element = vs.g_pDataModel.GetElementName(elementHandle)
		if (element == None):
			continue
		
		if (element.GetName() == name):
			return vs.g_pDataModel.GetElement(elementHandle)
		#end if
		elementHandle = vs.g_pDataModel.NextAllocatedElement(elementHandle)
	#end for
	
	return None
#end

def FindElementByTypeAndName(type, name):
	max = vs.g_pDataModel.GetElementsAllocatedSoFar()
	elementHandle = vs.g_pDataModel.FirstAllocatedElement()
	
	for i in range(max):
		element = vs.g_pDataModel.GetElement(elementHandle)
		if (element == None):
			continue
			
		if (element.GetName() == name and element.GetTypeString() == type):
			return element
		#end if
		elementHandle = vs.g_pDataModel.NextAllocatedElement(elementHandle)
	#end for
	
	return None
#end

def GetAnimationSets():
	sets = FindElementsOfType("DmeAnimationSet")
	
	result = set()
	for i in sets:
		if (sfm.GetCurrentShot().FindAnimationSetIndex(i.GetName()) != -1):
			result.add(i.GetName())
	#end
	
	return result
#end

def FindElementsOfType(type):
	max = vs.g_pDataModel.GetElementsAllocatedSoFar()
	elementHandle = vs.g_pDataModel.FirstAllocatedElement()
	
	ret = []
	
	for i in range(max):
		element = vs.g_pDataModel.GetElement(elementHandle)
		if (element == None):
			continue
		
		if (element.GetTypeString() == type):
			ret.append(element)
		#end if
		elementHandle = vs.g_pDataModel.NextAllocatedElement(elementHandle)
	#end for
	
	return ret
#end

def GetPhysProperties(animSet, time):
	if (sfm.GetCurrentShot().FindAnimationSetIndex(animSet) == -1):
		return None

	sfm.UsingAnimationSet(animSet)
	root_group = sfm.GetCurrentAnimationSet().GetRootControlGroup()
	
	if (not root_group.HasChildGroup("Physics", False)): #check if the phys rig is present
		return None
	
	phys_group = root_group.FindChildByName("Physics", False)
	root_transform = GetRootTransform(animSet, time)
	
	#shape properties
	shape = GetValueAtTime(phys_group.FindControlByName("Shape", False).channel, time)
	if (shape > 0.5):
		shape = "sphere"
	else:
		shape = "box"
	
	root_dag = sfmUtils.FindFirstDag(["RootTransform", "rootTransform", "roottransform"], True )
	box_minvec = vs.Vector()
	box_maxvec = vs.Vector()
	vs.GetMDLBoundingBox(box_minvec, box_maxvec, root_dag.GetModelHandle(), 0)
	sys.stderr.write("box: "+str(box_minvec)+" "+str(box_maxvec)+"\n")
	shapesize = [(box_maxvec[0]-box_minvec[0]) / 2,
				(box_maxvec[1]-box_minvec[1]) / 2,
				(box_maxvec[2]-box_minvec[2]) / 2]
	
	#center of mass
	center_dag = phys_group.FindControlByName("CenterOfMass", False).GetDag()
	center_pos = GetValueAtTime(center_dag.FindTransformControl().GetPositionChannel(), time)
	
	#other phys properties
	kinematic = GetValueAtTime(phys_group.FindControlByName("Kinematic", False).channel, time)
	if (kinematic > 0.5):
		kinematic = 1
	else:
		kinematic = 0
	
	friction = GetValueAtTime(phys_group.FindControlByName("Friction", False).channel, time)
	bounce = GetValueAtTime(phys_group.FindControlByName("Bounce", False).channel, time)
	density = GetValueAtTime(phys_group.FindControlByName("Density", False).channel, time)
	
	return {"name": animSet,
			"pos": root_transform["pos"], 
			"rot": root_transform["rot"], 
			"shape": shape, 
			"shapesize": UnitsToMeters(shapesize),
			"centerofmass": UnitsToMeters([center_pos[0], center_pos[1], center_pos[2]]), 
			"kinematic": kinematic, 
			"friction": friction, 
			"bounce": bounce, 
			"density": density}
#end

def GetRootTransform(animSet, time):
	sfm.UsingAnimationSet(animSet)
	
	root_dag = sfmUtils.FindFirstDag(["RootTransform", "rootTransform", "roottransform"], True )
	root_pos = GetValueAtTime(root_dag.FindTransformControl().GetPositionChannel(), time)
	root_quat = GetValueAtTime(root_dag.FindTransformControl().GetOrientationChannel(), time)
	
	return {"pos": UnitsToMeters([root_pos[0], root_pos[1], root_pos[2]]),
			"rot": [root_quat.x, root_quat.y, root_quat.z, root_quat.w]}
#end

def SetRootTransform(animSet, time, pos, rot):
	sfm.UsingAnimationSet(animSet)
	root_dag = sfmUtils.FindFirstDag(["RootTransform", "rootTransform", "roottransform"], True )
	
	pos = MetersToUnits(pos)
	posvec = vs.Vector(pos[0], pos[1], pos[2])
	
	quat = vs.Quaternion()
	quat.x = rot[0]
	quat.y = rot[1]
	quat.z = rot[2]
	quat.w = rot[3]
		
	SetValueAtTime(root_dag.FindTransformControl().GetPositionChannel(), time, posvec)
	SetValueAtTime(root_dag.FindTransformControl().GetOrientationChannel(), time, quat)
#end

def GetForceTransform(animSet, time):
	sfm.UsingAnimationSet(animSet)
	root_group = sfm.GetCurrentAnimationSet().GetRootControlGroup()
	phys_group = root_group.FindChildByName("Physics", False)
	
	force_dag = phys_group.FindControlByName("Force", False).GetDag()
	force_pos = GetValueAtTime(force_dag.FindTransformControl().GetPositionChannel(), time)
	force_quat = GetValueAtTime(force_dag.FindTransformControl().GetOrientationChannel(), time)
	force_angles = vs.RadianEuler()
	vs.QuaternionAngles(force_quat, force_angles)
	
	return {"pos": UnitsToMeters([force_pos[0], force_pos[1], force_pos[2]]),
			"rot": [force_angles.x, force_angles.y, force_angles.z]}
#end

def GetCurrentTimeSelection():
	timeSelection = FindElementByTypeAndName("DmeTimeSelection", "timeSelection")
	
	times = [timeSelection.GetAttribute("falloff_left"),
		timeSelection.GetAttribute("hold_left"),
		timeSelection.GetAttribute("falloff_right"),
		timeSelection.GetAttribute("hold_right")]
	
	return {"falloff_left": times[0].GetValue().GetSeconds(),
			"hold_left": times[1].GetValue().GetSeconds(),
			"falloff_right": times[2].GetValue().GetSeconds(),
			"hold_right": times[3].GetValue().GetSeconds()}
#end

def GetValueAtTime(channel, time):
	clipstart = sfm.GetCurrentShot().GetStartTime()
	start = channel.FindOwnerClipForChannel(sfm.GetCurrentShot()).GetStartTime()
	return channel.GetLog().GetValue((time - clipstart) - start)
#end

def SetValueAtTime(channel, time, value):
	clipstart = sfm.GetCurrentShot().GetStartTime()
	start = channel.FindOwnerClipForChannel(sfm.GetCurrentShot()).GetStartTime()
	channel.GetLog().SetKey((time - clipstart) - start, value);
#end

def GetFrameRate():
	renderSettings = FindElementByTypeAndName("DmElement", "renderSettings")
	return renderSettings.GetAttribute("frameRate").GetValue()
#end